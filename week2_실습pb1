#include <iostream>
#include <string>
using namespace std;

class node {
private:
	int val;
	node* next;
public:
	node() :val{ -1 }, next{ nullptr } {}
	node(int val) :val{ val }, next{ nullptr } {}
	friend class S_linkedList;
};

class S_linkedList {
private:
	int size;
	node* head;
	node* tail;
public:
	S_linkedList() :head{ nullptr }, tail{ nullptr }, size{ 0 } {}
	bool empty() {
		return (size == 0);
	}
	void Print() {
		if (empty()) {
			cout << "empty" << endl;
			return;
		}
		node* curNode = head;
		for (int i = 0; i < size; i++) {
			cout << curNode->val << " ";
			curNode = curNode->next;
		}
		cout << endl;
		return;
	}

	void Append(int x) {
		node* newNode = new node{ x };

		if (empty()) {
			head = newNode;
			tail = newNode;
			size++;
			Print();
			return;
		}

		tail->next = newNode;
		tail = newNode;
		size++;
		Print();
		return;
	}

	int Delete(int i) {
		if (empty() || i < 0 || i >= size) {
			return -1;
		}

		int val;
		node* delNode = head;
		node* preNode = head;

		if (i == 0) {
			if (size == 1) {
				val = head->val;
				head = nullptr;
				tail = nullptr;
				size--;
			}
			else {
				val = delNode->val;
				head = delNode->next;
				size--;
			}
		}
		else {
			int cnt = 0;
			while (cnt != i) {
				preNode = delNode;
				delNode = delNode->next;
				cnt++;
			}
			val = delNode->val;
			preNode->next = delNode->next;

			if (delNode == tail) {
				tail = preNode;
			}

			size--;
		}

		delete delNode;
		return val;		
	}

	int AfterMin(int i) {
		if (empty() || i < 0 || i >= size) {
			cout << "error" << endl;
			return -1;
		}
		node* curNode = head;
		int cnt{ 0 };
		int min;
		while (cnt != i) {
			curNode = curNode->next;
			cnt++;
		}
		min = curNode->val;
		for (int j = i; j < size; j++) {
			if (min > curNode->val) {
				min = curNode->val;
			}
			curNode = curNode->next;
		}
		return min;
	}

	int Sum() {
		if (empty()) {
			return 0;
		}
		node* curNode = head;
		int sum{ 0 };
		for (int i = 0; i < size; i++) {
			sum += curNode->val;
			curNode = curNode->next;
		}
		return sum;
	}

};

int main() {
	int m, i, x;
	string str;
	S_linkedList slL;
	
	cin >> m;
	while (m--) {
		cin >> str;
		if (str == "Print") {
			slL.Print();
		}
		else if (str == "Append") {
			cin >> x;
			slL.Append(x);
		}
		else if (str == "Delete") {
			cin >> i;
			int n = slL.Delete(i);
			cout << n << endl;
		}
		else if (str == "AfterMin") {
			cin >> i;
			int n = slL.AfterMin(i);
			if (n != -1) {
				cout << n << endl;
			}
		}
		else if (str == "Sum") {
			cout << slL.Sum() << endl;
		}
	}
}
